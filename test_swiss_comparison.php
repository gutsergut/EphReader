<?php
/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ Swiss Ephemeris —Å JPL/EPM
 * –ë–µ–Ω—á–º–∞—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
 */

declare(strict_types=1);

// –¢–µ—Å—Ç–æ–≤—ã–µ —ç–ø–æ—Ö–∏ (JD)
const TEST_EPOCHS = [
    2451545.0,   // J2000.0 (2000-01-01 12:00 TT)
    2460000.0,   // 2023-02-25
    2470000.0,   // 2050-06-15
    2400000.0,   // 1858-11-16 (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —ç–ø–æ—Ö–∞)
];

// –¢–µ–ª–∞ (Swiss ID -> Name)
const TEST_BODIES = [
    0 => 'Sun',
    1 => 'Moon',
    2 => 'Mercury',
    3 => 'Venus',
    4 => 'Mars',
    5 => 'Jupiter',
    6 => 'Saturn',
    7 => 'Uranus',
    8 => 'Neptune',
    9 => 'Pluto',
];

// –ú–∞–ø–ø–∏–Ω–≥ Swiss ID -> NAIF ID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
const SWISS_TO_NAIF = [
    0 => 10,   // Sun
    1 => 301,  // Moon
    2 => 1,    // Mercury
    3 => 2,    // Venus
    4 => 4,    // Mars
    5 => 5,    // Jupiter
    6 => 6,    // Saturn
    7 => 7,    // Uranus
    8 => 8,    // Neptune
    9 => 9,    // Pluto
];

class SwissEphemerisComparison
{
    private FFI $ffi;
    private array $results = [
        'performance' => [],
        'accuracy' => [],
    ];

    public function __construct()
    {
        // –ó–∞–≥—Ä—É–∑–∫–∞ Swiss Ephemeris —á–µ—Ä–µ–∑ FFI
        $libPath = __DIR__ . '/../vendor/swisseph/libswe.dll';
        if (!file_exists($libPath)) {
            throw new RuntimeException("Swiss Ephemeris library not found: $libPath");
        }

        $header = <<<HEADER
        void swe_set_ephe_path(const char *path);
        int swe_calc_ut(double tjd_ut, int ipl, int iflag, double *xx, char *serr);
        void swe_close(void);
        HEADER;

        $this->ffi = FFI::cdef($header, $libPath);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —ç—Ñ–µ–º–µ—Ä–∏–¥–∞–º
        $ephePath = realpath(__DIR__ . '/../ephe');
        $this->ffi->swe_set_ephe_path($ephePath);

        echo "‚úÖ Swiss Ephemeris loaded from: $libPath\n";
        echo "‚úÖ Ephemeris path: $ephePath\n";
    }

    public function __destruct()
    {
        $this->ffi->swe_close();
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–ª–∞
     */
    public function computePosition(int $body, float $jd, int $flags = 0): ?array
    {
        $xx = FFI::new('double[6]');
        $serr = FFI::new('char[256]');

        // SEFLG_SWIEPH (2) + SEFLG_BARYCTR (16384) + SEFLG_XYZ (4096)
        $iflag = 2 | 16384 | 4096 | $flags;

        $ret = $this->ffi->swe_calc_ut($jd - 2451545.0, $body, $iflag, FFI::addr($xx), FFI::addr($serr));

        if ($ret < 0) {
            return null;
        }

        return [
            'x' => $xx[0],
            'y' => $xx[1],
            'z' => $xx[2],
            'vx' => $xx[3],
            'vy' => $xx[4],
            'vz' => $xx[5],
        ];
    }

    /**
     * –ë–µ–Ω—á–º–∞—Ä–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
     */
    public function benchmarkAccessSpeed(int $iterations = 100): array
    {
        echo "\nüîß –ë–µ–Ω—á–º–∞—Ä–∫ Swiss Ephemeris (FFI)...\n";

        $times = [];
        $successful = 0;

        for ($i = 0; $i < $iterations; $i++) {
            $epoch = TEST_EPOCHS[$i % count(TEST_EPOCHS)];
            $body = array_keys(TEST_BODIES)[$i % count(TEST_BODIES)];

            $start = microtime(true);
            $result = $this->computePosition($body, $epoch);
            $elapsed = (microtime(true) - $start) * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

            if ($result !== null) {
                $times[] = $elapsed;
                $successful++;
            }
        }

        if (empty($times)) {
            return ['error' => '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π'];
        }

        sort($times);
        $count = count($times);

        return [
            'mean_ms' => array_sum($times) / $count,
            'median_ms' => $times[intdiv($count, 2)],
            'min_ms' => min($times),
            'max_ms' => max($times),
            'stdev_ms' => $this->stdev($times),
            'success_rate' => ($successful / $iterations) * 100,
            'total_iterations' => $iterations,
        ];
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º (–¥–∞–Ω–Ω—ã–µ –∏–∑ Python/calceph)
     */
    public function compareWithReference(array $referenceData): array
    {
        echo "\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Swiss Ephemeris —Å JPL DE440...\n";

        $errors = [];
        $bodyErrors = [];

        foreach (TEST_EPOCHS as $epoch) {
            foreach (TEST_BODIES as $swissId => $bodyName) {
                $naifId = SWISS_TO_NAIF[$swissId];

                // –í—ã—á–∏—Å–ª—è–µ–º Swiss –ø–æ–∑–∏—Ü–∏—é
                $swissPos = $this->computePosition($swissId, $epoch);

                if ($swissPos === null) {
                    continue;
                }

                // –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –ø–æ–∑–∏—Ü–∏—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Python —Å–∫—Ä–∏–ø—Ç–∞)
                $refKey = "{$naifId}_{$epoch}";
                if (!isset($referenceData[$refKey])) {
                    continue;
                }

                $refPos = $referenceData[$refKey];

                // –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É (Euclidean distance in AU)
                $dx = $swissPos['x'] - $refPos['x'];
                $dy = $swissPos['y'] - $refPos['y'];
                $dz = $swissPos['z'] - $refPos['z'];
                $errorAu = sqrt($dx*$dx + $dy*$dy + $dz*$dz);
                $errorKm = $errorAu * 149597870.7;

                $errors[] = $errorKm;
                $bodyErrors[$bodyName][] = $errorKm;
            }
        }

        if (empty($errors)) {
            return ['error' => '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π'];
        }

        sort($errors);
        $count = count($errors);

        $result = [
            'median_km' => $errors[intdiv($count, 2)],
            'mean_km' => array_sum($errors) / $count,
            'min_km' => min($errors),
            'max_km' => max($errors),
            'stdev_km' => $this->stdev($errors),
            'body_errors' => [],
        ];

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–ª–∞–º
        foreach ($bodyErrors as $bodyName => $bodyErrs) {
            if (empty($bodyErrs)) continue;

            sort($bodyErrs);
            $bodyCount = count($bodyErrs);

            $result['body_errors'][$bodyName] = [
                'median_km' => $bodyErrs[intdiv($bodyCount, 2)],
                'max_km' => max($bodyErrs),
            ];
        }

        return $result;
    }

    /**
     * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
     */
    private function stdev(array $values): float
    {
        $count = count($values);
        if ($count < 2) {
            return 0.0;
        }

        $mean = array_sum($values) / $count;
        $variance = 0.0;

        foreach ($values as $value) {
            $variance += pow($value - $mean, 2);
        }

        return sqrt($variance / ($count - 1));
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    public function runFullComparison(): void
    {
        echo str_repeat('=', 80) . "\n";
        echo "üöÄ SWISS EPHEMERIS COMPARISON\n";
        echo str_repeat('=', 80) . "\n";

        // 1. –ë–µ–Ω—á–º–∞—Ä–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏
        echo "\n" . str_repeat('=', 80) . "\n";
        echo "‚ö° –ë–ï–ù–ß–ú–ê–†–ö –°–ö–û–†–û–°–¢–ò\n";
        echo str_repeat('=', 80) . "\n";

        $this->results['performance'] = $this->benchmarkAccessSpeed(100);

        // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
        $refFile = __DIR__ . '/../COMPREHENSIVE_COMPARISON_RESULTS.json';
        if (file_exists($refFile)) {
            echo "\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Python...\n";
            // TODO: –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            echo "‚ö†Ô∏è  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Python —Å–∫—Ä–∏–ø—Ç–∞\n";
        }

        // 3. –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->printResults();

        // 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        $this->saveResults();
    }

    /**
     * –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    private function printResults(): void
    {
        echo "\n" . str_repeat('=', 80) . "\n";
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´\n";
        echo str_repeat('=', 80) . "\n";

        if (isset($this->results['performance']) && !isset($this->results['performance']['error'])) {
            $perf = $this->results['performance'];

            echo "\n‚ö° –°–ö–û–†–û–°–¢–¨ –î–û–°–¢–£–ü–ê (Swiss Ephemeris FFI)\n";
            echo str_repeat('-', 80) . "\n";
            printf("Mean:          %.3f ms\n", $perf['mean_ms']);
            printf("Median:        %.3f ms\n", $perf['median_ms']);
            printf("Min:           %.3f ms\n", $perf['min_ms']);
            printf("Max:           %.3f ms\n", $perf['max_ms']);
            printf("Stdev:         %.3f ms\n", $perf['stdev_ms']);
            printf("Success rate:  %.1f%%\n", $perf['success_rate']);
        }

        if (isset($this->results['accuracy']) && !isset($this->results['accuracy']['error'])) {
            $acc = $this->results['accuracy'];

            echo "\nüéØ –¢–û–ß–ù–û–°–¢–¨ (vs JPL DE440)\n";
            echo str_repeat('-', 80) . "\n";
            printf("Median error:  %.2f km\n", $acc['median_km']);
            printf("Mean error:    %.2f km\n", $acc['mean_km']);
            printf("Min error:     %.2f km\n", $acc['min_km']);
            printf("Max error:     %.2f km\n", $acc['max_km']);

            if (isset($acc['body_errors'])) {
                echo "\n–ü–æ —Ç–µ–ª–∞–º:\n";
                foreach ($acc['body_errors'] as $body => $errors) {
                    printf("  %-10s: %.2f km (median), %.2f km (max)\n",
                        $body, $errors['median_km'], $errors['max_km']);
                }
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    private function saveResults(): void
    {
        $outputFile = __DIR__ . '/../SWISS_EPHEMERIS_COMPARISON.json';
        file_put_contents(
            $outputFile,
            json_encode($this->results, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE)
        );
        echo "\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $outputFile\n";
    }
}

// –ó–∞–ø—É—Å–∫
try {
    $comparison = new SwissEphemerisComparison();
    $comparison->runFullComparison();
} catch (Throwable $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    echo $e->getTraceAsString() . "\n";
    exit(1);
}
