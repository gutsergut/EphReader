#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ñ–µ–º–µ—Ä–∏–¥: —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç JPL DE440, DE431, EPM2021, Swiss Ephemeris
"""

import sys
import time
import statistics
from pathlib import Path
from typing import Dict, List, Tuple
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ calceph
sys.path.insert(0, str(Path(__file__).parent.parent / 'vendor' / 'calceph-4.0.1' / 'install' / 'lib' / 'python'))

try:
    import calceph
    HAS_CALCEPH = True
except ImportError:
    HAS_CALCEPH = False
    print("‚ö†Ô∏è  calceph –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —á–∞—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞")

# –¢–µ—Å—Ç–æ–≤—ã–µ —ç–ø–æ—Ö–∏ (JD)
TEST_EPOCHS = [
    2451545.0,   # J2000.0 (2000-01-01 12:00 TT)
    2460000.0,   # 2023-02-25
    2470000.0,   # 2050-06-15
    2400000.0,   # 1858-11-16 (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —ç–ø–æ—Ö–∞)
]

# –¢–µ–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (NAIF ID)
TEST_BODIES = {
    1: "Mercury",
    2: "Venus",
    3: "EMB",
    4: "Mars",
    5: "Jupiter",
    6: "Saturn",
    7: "Uranus",
    8: "Neptune",
    9: "Pluto",
    10: "Sun",
    301: "Moon",
    399: "Earth",
}

class EphemerisComparison:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ñ–µ–º–µ—Ä–∏–¥"""

    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.results = {
            'accuracy': {},
            'performance': {},
            'intervals': {},
        }

    def load_ephemeris(self, name: str, path: str) -> calceph.Ephem:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ñ–µ–º–µ—Ä–∏–¥—ã —á–µ—Ä–µ–∑ calceph"""
        full_path = self.base_dir / path
        if not full_path.exists():
            raise FileNotFoundError(f"{name}: {full_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        eph = calceph.Ephem()
        eph.open(str(full_path))
        return eph

    def compute_position(self, eph: calceph.Ephem, body: int, epoch: float) -> Tuple[float, float, float]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–ª–∞"""
        try:
            # Barrycentric position (center=0)
            result = eph.compute(epoch, body, 0, calceph.Constants.USE_NAIFID)
            if result is None:
                return None
            return (result[0], result[1], result[2])
        except Exception as e:
            return None

    def distance_3d(self, pos1, pos2) -> float:
        """–ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ 3D (AU)"""
        if pos1 is None or pos2 is None:
            return None
        dx = pos1[0] - pos2[0]
        dy = pos1[1] - pos2[1]
        dz = pos1[2] - pos2[2]
        return (dx*dx + dy*dy + dz*dz) ** 0.5

    def benchmark_access_speed(self, name: str, eph: calceph.Ephem, iterations: int = 100) -> Dict:
        """–ë–µ–Ω—á–º–∞—Ä–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞"""
        print(f"\nüîß –ë–µ–Ω—á–º–∞—Ä–∫ {name}...")

        times = []
        successful = 0

        for i in range(iterations):
            # –°–ª—É—á–∞–π–Ω–∞—è —ç–ø–æ—Ö–∞ –∏ —Ç–µ–ª–æ
            epoch = TEST_EPOCHS[i % len(TEST_EPOCHS)]
            body = list(TEST_BODIES.keys())[i % len(TEST_BODIES)]

            start = time.perf_counter()
            result = self.compute_position(eph, body, epoch)
            elapsed = time.perf_counter() - start

            if result is not None:
                times.append(elapsed * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                successful += 1

        if not times:
            return {
                'error': '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π',
                'success_rate': 0.0
            }

        return {
            'mean_ms': statistics.mean(times),
            'median_ms': statistics.median(times),
            'min_ms': min(times),
            'max_ms': max(times),
            'stdev_ms': statistics.stdev(times) if len(times) > 1 else 0,
            'success_rate': (successful / iterations) * 100,
            'total_iterations': iterations,
        }

    def compare_accuracy(self, reference_name: str, reference_eph: calceph.Ephem,
                        test_name: str, test_eph: calceph.Ephem) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å —ç—Ç–∞–ª–æ–Ω–æ–º"""
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {test_name} vs {reference_name}...")

        errors = []
        body_errors = {body: [] for body in TEST_BODIES}

        for epoch in TEST_EPOCHS:
            for body_id, body_name in TEST_BODIES.items():
                ref_pos = self.compute_position(reference_eph, body_id, epoch)
                test_pos = self.compute_position(test_eph, body_id, epoch)

                if ref_pos and test_pos:
                    error_au = self.distance_3d(ref_pos, test_pos)
                    error_km = error_au * 149597870.7  # AU to km
                    errors.append(error_km)
                    body_errors[body_id].append(error_km)

        if not errors:
            return {'error': '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π'}

        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result = {
            'median_km': statistics.median(errors),
            'mean_km': statistics.mean(errors),
            'min_km': min(errors),
            'max_km': max(errors),
            'stdev_km': statistics.stdev(errors) if len(errors) > 1 else 0,
            'body_errors': {}
        }

        # –ü–æ –∫–∞–∂–¥–æ–º—É —Ç–µ–ª—É
        for body_id, body_name in TEST_BODIES.items():
            if body_errors[body_id]:
                result['body_errors'][body_name] = {
                    'median_km': statistics.median(body_errors[body_id]),
                    'max_km': max(body_errors[body_id]),
                }

        return result

    def extract_intervals(self, name: str, path: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —á–µ—Ä–µ–∑ calceph_inspector"""
        print(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ {name}...")

        inspector_path = self.base_dir / 'vendor' / 'calceph-4.0.1' / 'install' / 'bin' / 'calceph_inspector.exe'
        if not inspector_path.exists():
            return {'error': 'calceph_inspector –Ω–µ –Ω–∞–π–¥–µ–Ω'}

        import subprocess
        full_path = self.base_dir / path

        try:
            result = subprocess.run(
                [str(inspector_path), str(full_path)],
                capture_output=True,
                text=True,
                timeout=30
            )

            intervals = {}
            for line in result.stdout.splitlines():
                # –ü–∞—Ä—Å–∏–º: "1           0           -3100014.50     1721425.50       1         2           Time span per record:    8 (day)"
                if 'Time span per record' in line:
                    parts = line.split()
                    body_id = int(parts[0])
                    interval_idx = parts.index('record:') + 1
                    interval_days = float(parts[interval_idx])

                    if body_id in TEST_BODIES:
                        intervals[TEST_BODIES[body_id]] = interval_days

            return intervals

        except Exception as e:
            return {'error': str(e)}

    def run_full_comparison(self):
        """–ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ñ–µ–º–µ—Ä–∏–¥"""

        print("=" * 80)
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –≠–§–ï–ú–ï–†–ò–î")
        print("=" * 80)

        if not HAS_CALCEPH:
            print("\n‚ùå calceph –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: cd vendor/calceph-4.0.1/pythonapi && python setup.py install --user")
            return

        ephemerides = {
            'DE440': 'data/ephemerides/jpl/de440/linux_p1550p2650.440',
            'DE431_Part1': 'data/ephemerides/jpl/de431/de431_part-1.bsp',
            'EPM2021': 'data/ephemerides/epm/2021/spice/epm2021.bsp',
        }

        # –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ñ–µ–º–µ—Ä–∏–¥
        print("\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ñ–µ–º–µ—Ä–∏–¥...")
        loaded = {}

        for name, path in ephemerides.items():
            try:
                loaded[name] = self.load_ephemeris(name, path)
                print(f"  ‚úÖ {name}: {path}")
            except FileNotFoundError as e:
                print(f"  ‚ö†Ô∏è  {name}: –Ω–µ –Ω–∞–π–¥–µ–Ω ({path})")
            except Exception as e:
                print(f"  ‚ùå {name}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")

        if len(loaded) < 2:
            print("\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ñ–µ–º–µ—Ä–∏–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
            return

        # 1. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–ù–¢–ï–†–í–ê–õ–û–í
        print("\n" + "=" * 80)
        print("üìè –ù–ê–¢–ò–í–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´")
        print("=" * 80)

        for name, path in ephemerides.items():
            if name in loaded:
                intervals = self.extract_intervals(name, path)
                self.results['intervals'][name] = intervals

        # 2. –ë–ï–ù–ß–ú–ê–†–ö–ò –°–ö–û–†–û–°–¢–ò
        print("\n" + "=" * 80)
        print("‚ö° –ë–ï–ù–ß–ú–ê–†–ö–ò –°–ö–û–†–û–°–¢–ò –î–û–°–¢–£–ü–ê")
        print("=" * 80)

        for name, eph in loaded.items():
            perf = self.benchmark_access_speed(name, eph, iterations=100)
            self.results['performance'][name] = perf

        # 3. –°–†–ê–í–ù–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò (DE440 –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω)
        print("\n" + "=" * 80)
        print("üéØ –°–†–ê–í–ù–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò (—ç—Ç–∞–ª–æ–Ω: JPL DE440)")
        print("=" * 80)

        if 'DE440' in loaded:
            reference_eph = loaded['DE440']
            reference_name = 'DE440'

            for name, eph in loaded.items():
                if name != reference_name:
                    accuracy = self.compare_accuracy(reference_name, reference_eph, name, eph)
                    self.results['accuracy'][f'{name}_vs_{reference_name}'] = accuracy

        # 4. –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢
        self.print_final_report()
        self.save_results()

    def print_final_report(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""

        print("\n" + "=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢")
        print("=" * 80)

        # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if self.results['intervals']:
            print("\n1Ô∏è‚É£  –ù–ê–¢–ò–í–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´ (–¥–Ω–∏)")
            print("-" * 80)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–ª–∞
            all_bodies = set()
            for intervals in self.results['intervals'].values():
                if isinstance(intervals, dict) and 'error' not in intervals:
                    all_bodies.update(intervals.keys())

            # –ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
            print(f"{'Body':<12}", end="")
            for name in self.results['intervals'].keys():
                print(f"{name:<15}", end="")
            print()
            print("-" * 80)

            # –ü–µ—á–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö
            for body in sorted(all_bodies):
                print(f"{body:<12}", end="")
                for name, intervals in self.results['intervals'].items():
                    if isinstance(intervals, dict) and 'error' not in intervals:
                        value = intervals.get(body, '-')
                        if isinstance(value, float):
                            print(f"{value:<15.1f}", end="")
                        else:
                            print(f"{value:<15}", end="")
                    else:
                        print(f"{'ERROR':<15}", end="")
                print()

        # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if self.results['performance']:
            print("\n2Ô∏è‚É£  –°–ö–û–†–û–°–¢–¨ –î–û–°–¢–£–ü–ê")
            print("-" * 80)
            print(f"{'Ephemeris':<15} {'Mean (ms)':<12} {'Median (ms)':<12} {'Min (ms)':<12} {'Max (ms)':<12} {'Success %':<10}")
            print("-" * 80)

            for name, perf in self.results['performance'].items():
                if 'error' not in perf:
                    print(f"{name:<15} "
                          f"{perf['mean_ms']:<12.3f} "
                          f"{perf['median_ms']:<12.3f} "
                          f"{perf['min_ms']:<12.3f} "
                          f"{perf['max_ms']:<12.3f} "
                          f"{perf['success_rate']:<10.1f}")
                else:
                    print(f"{name:<15} ERROR: {perf['error']}")

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if self.results['accuracy']:
            print("\n3Ô∏è‚É£  –¢–û–ß–ù–û–°–¢–¨ (vs DE440)")
            print("-" * 80)
            print(f"{'Ephemeris':<15} {'Median (km)':<15} {'Mean (km)':<15} {'Min (km)':<15} {'Max (km)':<15}")
            print("-" * 80)

            for name, acc in self.results['accuracy'].items():
                if 'error' not in acc:
                    eph_name = name.replace('_vs_DE440', '')
                    print(f"{eph_name:<15} "
                          f"{acc['median_km']:<15.2f} "
                          f"{acc['mean_km']:<15.2f} "
                          f"{acc['min_km']:<15.2f} "
                          f"{acc['max_km']:<15.2f}")
                else:
                    print(f"{name:<15} ERROR: {acc['error']}")

            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–µ–ª–∞–º
            print("\n4Ô∏è‚É£  –¢–û–ß–ù–û–°–¢–¨ –ü–û –¢–ï–õ–ê–ú (Median, km)")
            print("-" * 80)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç—Ñ–µ–º–µ—Ä–∏–¥—ã
            eph_names = [name.replace('_vs_DE440', '') for name in self.results['accuracy'].keys()
                        if 'error' not in self.results['accuracy'][name]]

            if eph_names:
                print(f"{'Body':<12}", end="")
                for name in eph_names:
                    print(f"{name:<15}", end="")
                print()
                print("-" * 80)

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–ª–∞
                all_bodies = set()
                for acc in self.results['accuracy'].values():
                    if isinstance(acc, dict) and 'body_errors' in acc:
                        all_bodies.update(acc['body_errors'].keys())

                for body in sorted(all_bodies):
                    print(f"{body:<12}", end="")
                    for name in eph_names:
                        full_name = f"{name}_vs_DE440"
                        acc = self.results['accuracy'].get(full_name, {})
                        if 'body_errors' in acc and body in acc['body_errors']:
                            median = acc['body_errors'][body]['median_km']
                            print(f"{median:<15.2f}", end="")
                        else:
                            print(f"{'-':<15}", end="")
                    print()

    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        output_file = self.base_dir / 'COMPREHENSIVE_COMPARISON_RESULTS.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")


def main():
    comparison = EphemerisComparison()
    comparison.run_full_comparison()


if __name__ == '__main__':
    main()
